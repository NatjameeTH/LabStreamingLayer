# Online Plot ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ channel "".

import numpy as np
import time
import matplotlib.pyplot as plt
from pylsl import StreamInlet, resolve_streams

def main():
    print("üîç Looking for all streams...")

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î .
    all_streams = resolve_streams()

    if not all_streams:
        print(" No streams found!")
        return

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_stream_data = []

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Inlet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ stream
    for stream in all_streams:
        print(f"Found stream: {stream.name()} of type {stream.type()}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Inlet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stream ‡∏ô‡∏µ‡πâ
        inlet = StreamInlet(stream)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á stream
        signal_info = inlet.info()
        num_channels = signal_info.channel_count()
        print(f" Number of channels: {num_channels}")

        # ‡∏î‡∏∂‡∏á metadata ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        desc = signal_info.desc()
        ch_list = desc.child("channels").child("channel")

        channel_names = []
        for i in range(num_channels):
            channel_names.append(ch_list.child_value("label"))
            ch_list = ch_list.next_sibling()

        print(" Channel Names:", channel_names)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ stream
        stream_data = []

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å subplot ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        fig, axes = plt.subplots(num_channels, 1, figsize=(15, 10 * num_channels), sharex=True)
        if num_channels == 1:
            axes = [axes]  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô list

        try:
            # ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ
            while True:
                # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream
                sample, timestamp = inlet.pull_sample(timeout=1.0)
                if sample is not None:
                    print(f" Signal - Timestamp: {timestamp:.3f}, Sample: {sample}")
                    stream_data.append([timestamp] + sample)  # ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡πÅ‡∏•‡∏∞ sample

                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                time.sleep(0.01)

                # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
                if len(stream_data) > 0:
                    # ‡πÅ‡∏¢‡∏Å timestamp ‡πÅ‡∏•‡∏∞ signal sample
                    timestamps = [data[0] for data in stream_data]
                    signal_values = np.array([data[1:] for data in stream_data])

                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà
                    for ax in axes:
                        ax.clear()

                    for i in range(signal_values.shape[1]):
                        axes[i].plot(timestamps, signal_values[:, i], label=f'Channel {i+1}')
                        axes[i].set_ylabel(f'Ch {i+1}')
                        axes[i].legend(loc='upper right')

                    axes[-1].set_xlabel('Time (s)')  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô X ‡πÉ‡∏ô subplot ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
                    plt.suptitle('EEG Signal')
                    plt.pause(0.05)  # Pause ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

        except KeyboardInterrupt:
            print("\ Program interrupted by user. Saving data...")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô list ‡∏´‡∏•‡∏±‡∏Å
            if stream_data:
                all_stream_data.append(np.array(stream_data))
            else:
                all_stream_data.append(np.empty((0, num_channels + 1)))  # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ

            break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    if all_stream_data:
        np.save("UnicornSignal.npy", all_stream_data)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream
        print(" Data saved to 'UnicornSignal.npy'.")
    else:
        print(" No data collected.")

    plt.show()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop

if __name__ == '__main__':
    main()
