# ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ‡∏à‡∏≤‡∏Å g-tec Unicorn (LSL: LabRecorder)
# Plot ‡∏Å‡∏£‡∏≤‡∏ü ‡πÅ‡∏ö‡∏ö Offline ‡∏î‡πâ‡∏ß‡∏¢ MatPlotlib

import numpy as np
import time
import matplotlib.pyplot as plt
from pylsl import StreamInlet, resolve_streams

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
channel_names = [
    'EEG 1', 'EEG 2', 'EEG 3', 'EEG 4', 'EEG 5', 'EEG 6', 'EEG 7', 'EEG 8',
    'Accelerometer X', 'Accelerometer Y', 'Accelerometer Z',
    'Gyroscope X', 'Gyroscope Y', 'Gyroscope Z',
    'Battery Level', 'Counter', 'Validation Indicator'
]

def main():
    print("üîç Looking for all streams...")

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
    all_streams = resolve_streams()

    if not all_streams:
        print(" No streams found!")
        return

    all_stream_data = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream
    for stream in all_streams:
        print(f"Found stream: {stream.name()} of type {stream.type()}")

        inlet = StreamInlet(stream)
        signal_info = inlet.info()
        num_channels = signal_info.channel_count()
        print(f" Number of channels: {num_channels}")

        stream_data = []

        try:
            while True:
                sample, timestamp = inlet.pull_sample(timeout=1.0)
                if sample is not None:
                    print(f" Signal - Timestamp: {timestamp:.3f}, Sample: {sample}")
                    stream_data.append([timestamp] + sample)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp + ‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

                time.sleep(0.05)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

        # Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        except KeyboardInterrupt:
            print("\n‚èπ Program interrupted by user. Saving data...")

            if stream_data:
                all_stream_data.append(np.array(stream_data))
            else:
                all_stream_data.append(np.empty((0, num_channels + 1))) 

            break  

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    if all_stream_data:
        np.save("all_stream_data.npy", all_stream_data)
        print("üíæ Data saved to 'all_stream_data.npy'.")
    else:
        print(" No data collected.")

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    if all_stream_data:
        plt.figure(figsize=(12, 8))
        cmap = plt.colormaps["tab10"]  # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏à‡∏≤‡∏Å colormap

        for idx, stream_data in enumerate(all_stream_data):
            timestamps = stream_data[:, 0]  
            signal_values = stream_data[:, 1:]  

            signal_values = np.array(signal_values)
            num_channels = signal_values.shape[1]

            for i in range(num_channels):
                offset = (num_channels - i - 1) * 50000  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î offset ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á
                label = channel_names[i] if i < len(channel_names) else f'CH{i+1}'
                plt.plot(timestamps, signal_values[:, i] + offset, label=label, color=cmap(i % 10))

        plt.xlabel('Time (s)')
        plt.ylabel('Amplitude ')
        plt.title('EEG Signals By Unicorn')
        plt.legend()
        plt.grid(True)
        plt.show()

if __name__ == '__main__':
    main()