import numpy as np
import time
import matplotlib.pyplot as plt
from pylsl import StreamInlet, resolve_streams

def main():
    print("üîç Looking for all streams...")

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ timeout)
    all_streams = resolve_streams()

    if not all_streams:
        print("‚ùå No streams found!")
        return

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_stream_data = []

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Inlet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ stream
    for stream in all_streams:
        print(f"Found stream: {stream.name()} of type {stream.type()}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Inlet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stream ‡∏ô‡∏µ‡πâ
        inlet = StreamInlet(stream)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á stream
        signal_info = inlet.info()
        num_channels = signal_info.channel_count()
        print(f" Number of channels: {num_channels}")

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ stream
        stream_data = []

        try:
            # ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ
            while True:
                # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream
                sample, timestamp = inlet.pull_sample(timeout=1.0)
                if sample is not None:
                    print(f" Signal - Timestamp: {timestamp:.3f}, Sample: {sample}")
                    stream_data.append([timestamp] + sample)  # ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡πÅ‡∏•‡∏∞ sample

                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ CPU ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                time.sleep(0.05)

                # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
                if len(stream_data) > 0:
                    # ‡πÅ‡∏¢‡∏Å timestamp ‡πÅ‡∏•‡∏∞ signal sample
                    timestamps = [data[0] for data in stream_data]
                    signal_values = [data[1:] for data in stream_data]

                    # ‡πÅ‡∏õ‡∏•‡∏á signal_values ‡πÄ‡∏õ‡πá‡∏ô numpy array
                    signal_values = np.array(signal_values)

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
                    plt.clf()  # ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                    for i in range(signal_values.shape[1]):
                        plt.plot(timestamps, signal_values[:, i], label=f'Channel {i+1}')

                    plt.xlabel('Time (s)')
                    plt.ylabel('Signal Value')
                    plt.title('EEG Signal')
                    plt.legend()
                    plt.pause(0.05)  # Pause ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

        except KeyboardInterrupt:
            print("\n‚èπ Program interrupted by user. Saving data...")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô list ‡∏´‡∏•‡∏±‡∏Å
            if stream_data:
                all_stream_data.append(np.array(stream_data))
            else:
                all_stream_data.append(np.empty((0, num_channels + 1)))  # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ

            break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stream ‡∏ô‡∏µ‡πâ

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    if all_stream_data:
        np.save("all_stream_data.npy", all_stream_data)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stream
        print("üíæ Data saved to 'all_stream_data.npy'.")
    else:
        print("‚ùå No data collected.")

    plt.show()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop

if __name__ == '__main__':
    main()
