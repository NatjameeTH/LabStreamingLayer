
## save ‡πÄ‡∏õ‡πá‡∏ô num.py ‡πÅ‡∏•‡∏∞ plot ‡∏Å‡∏£‡∏≤‡∏ü sine
import pyxdf
import numpy as np
import matplotlib.pyplot as plt
import os

def load_xdf_file(file_path):
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå XDF ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î """
    if not os.path.exists(file_path):
        print(f" ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
        return None, None
    try:
        streams, header = pyxdf.load_xdf(file_path, dejitter_timestamps=True)
        return streams, header
    except Exception as e:
        print(f" ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå XDF ‡πÑ‡∏î‡πâ: {e}")
        return None, None

def find_eeg_stream(streams):
    """ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Stream ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô EEG """
    for stream in streams:
        if 'type' in stream['info'] and 'EEG' in stream['info']['type']:
            return stream
    return None

def plot_eeg_signal(timestamps, eeg_data, num_channels=4, offset=20, time_window=10):  #time_window‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EEG ‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤)
    """ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EEG ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ """
    if eeg_data.shape[1] < 2:
        print(" ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏•‡πá‡∏≠‡∏ï")
        return

    
    plt.figure(figsize=(30, 10))  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
    plt.rcParams.update({'font.size': 14})  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü

    for i in range(min(num_channels, eeg_data.shape[0])):
        plt.plot(timestamps, eeg_data[i, :] + i * offset, label=f'Channel {i+1}')
    
    plt.xlabel("Time (s)")
    plt.ylabel("EEG Signal (Offset Applied)")
    plt.title("EEG Signal Display")
    plt.legend()
    plt.grid(True, linestyle='--', linewidth=0.5)  # ‡∏Å‡∏£‡∏¥‡∏î‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏•‡πá‡∏≠‡∏ï
    plt.xlim(timestamps[0], timestamps[0] + time_window)
    plt.show()


#  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå XDF
file_path = ("C:\\Users\\s\\Desktop\\LSL\\sub-19-2\\ses-S002\\eeg\\sub-19-2_ses-S002_task-Default_run-001_eeg.xdf")
#  ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå XDF
streams, header = load_xdf_file(file_path)
if streams is None:
    exit()

#  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Stream ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô EEG
eeg_stream = find_eeg_stream(streams)
if eeg_stream is None:
    print(" ‡πÑ‡∏°‡πà‡∏û‡∏ö Stream EEG ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå XDF")
    exit()

#  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EEG ‡πÅ‡∏•‡∏∞ timestamps
eeg_data = np.array(eeg_stream['time_series']).T  # (channels, samples)
timestamps = np.array(eeg_stream['time_stamps'])  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

#  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if eeg_data.size == 0 or timestamps.size == 0:
    print(" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Stream EEG")
    exit()

#  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EEG ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .npy
np.save("eeg_data.npy", eeg_data)
np.save("timestamps.npy", timestamps)
print(f" ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! EEG shape: {eeg_data.shape}, Timestamps shape: {timestamps.shape}")

# üìà ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EEG
plot_eeg_signal(timestamps, eeg_data, num_channels=4, offset=20, time_window=10)